{"version":3,"sources":["components/Navbar.js","components/newscard.js","pages/News.js","pages/Stats.js","pages/contact.js","Router.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","useState","active","setActive","className","onClick","to","Newscard","props","style","border","margin","borderRadius","padding","width","height","src","image","color","title","description","News","data","setData","getNews","a","axios","get","res","news","articles","console","log","useEffect","fontSize","map","item","urlToImage","Stats","filterdata","setfilerdata","confirmed","setConfirmed","filter","setfilter","deaths","setDeaths","recovered","setRecovered","Date","date","showgraph","setshowgraph","totdate","settotdate","totconfirmed","settotConfirmed","totactive","settotActive","totdeaths","settotDeaths","totrecovered","settotRecovered","search","setsearch","speak","useSpeechSynthesis","getData","timedata","cases_time_series","statewise","i","statedata","totdat","totc","totd","totr","tota","push","dailyconfirmed","dailyrecovered","dailydeceased","state","toLowerCase","includes","statecode","lastupdatedtime","text","labels","datasets","label","fill","backgroundColor","borderColor","options","pointStyle","pointBorderWidth","maintainAspectRatio","type","placeholder","value","onChange","e","target","onsearch","index","textAlign","split","getDate","getHours","Contact","Main","exact","path","component","Contacts","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73f38629.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar=()=>{\r\n    const [active,setActive]= useState('stats')\r\n    return(\r\n    <div className=\"navbar sticky-top\">\r\n        <div> \r\n            <h1>CovidStat</h1>\r\n        </div>\r\n        <div>\r\n            <ul className='navlist'>\r\n                <li className={active=='stats'? 'activenav' : ''} onClick={()=>{setActive('stats')}}><NavLink to=\"/\" >Stats</NavLink></li>\r\n                <li className={active=='News'? 'activenav' : ''} onClick={()=>{setActive('News')}}><NavLink to='/News'>News</NavLink></li>\r\n                <li className={active=='Con'? 'activenav' : ''} onClick={()=>{setActive('Contacts')}}><NavLink to='/contacts'>Contacts</NavLink></li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nconst Newscard=(props)=>{\r\n    return(\r\n        <div style={{border:'1px solid',margin:'4%',borderRadius:'20px'}}>\r\n            <img style={{padding:'2%'}} width='100%' height='100%' src={props.image} />\r\n            <div style={{padding:'5%'}}>\r\n            <h2 style={{color:'white'}}>{props.title}</h2>\r\n            <p>{props.description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Newscard","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Newscard from '../components/newscard'\r\n\r\nconst News=()=>{\r\n    const [data,setData]= useState([])\r\n\r\n    const getNews=async()=>{\r\n        const res = await axios.get('https://newsapi.org/v2/top-headlines?country=in&category=health&apiKey=4d258bd4b31f40c59180ce5b754b72e7')\r\n        const news= res.data.articles\r\n        setData(news)\r\n    }\r\n    console.log(data);\r\n\r\n    useEffect(()=>{\r\n        getNews()\r\n    },[]);\r\n\r\n    return(\r\n        <div className='newspage'>\r\n            <h1 className='heading'>Covid News</h1>\r\n            <div style={{padding:'5%'}}>\r\n                <div style={{fontSize:\"40px\"}}>All India's top healthcare news</div>\r\n                {\r\n                data.map((item)=>{\r\n                    return(\r\n                        <Newscard image={item.urlToImage} title={item.title} description={item.description} />\r\n                    )  \r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default News","import React,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { } from 'bootstrap'\r\nimport {Line} from 'react-chartjs-2'\r\nimport Speech from 'react-speech';\r\nimport {useSpeechSynthesis} from 'react-speech-kit'\r\n\r\nconst Stats=()=>{\r\n    const [data,setData]= useState([])\r\n    const [filterdata,setfilerdata]=useState([])\r\n    const [active,setActive]= useState('')\r\n    const [confirmed,setConfirmed]= useState('')\r\n    const [filter,setfilter]= useState('')\r\n    const [deaths,setDeaths]= useState('')\r\n    const [recovered,setRecovered]= useState('')\r\n    const [date,setDate]= useState(new Date())\r\n    const [showgraph,setshowgraph] = useState('confirmed')\r\n    const [rows, setRows] = useState([])\r\n    const [totdate,settotdate] = useState([])\r\n    const [totconfirmed,settotConfirmed]= useState([])\r\n    const [totactive,settotActive]= useState([])\r\n    const [totdeaths,settotDeaths]= useState([])\r\n    const [totrecovered,settotRecovered]= useState([])\r\n    const [search,setsearch]= useState(false)\r\n\r\n    const {speak} = useSpeechSynthesis();\r\n\r\n    const getData= async() =>{\r\n\r\n        const res = await axios.get('https://api.covid19india.org/data.json')\r\n        const timedata= res.data.cases_time_series\r\n        const statedata= await res.data.statewise;\r\n        setData(statedata)\r\n        setActive(statedata[0].active)\r\n        setConfirmed(statedata[0].confirmed)\r\n        setDeaths(statedata[0].deaths)\r\n        setRecovered(statedata[0].recovered)\r\n        var i=0\r\n        var totdat=[]\r\n        var totc=[]\r\n        var totd=[]\r\n        var totr=[]\r\n        var tota=[]\r\n        for (i in timedata){\r\n            totdat.push(timedata[i].date)\r\n            totc.push(timedata[i].dailyconfirmed)\r\n            totr.push(timedata[i].dailyrecovered)\r\n            totd.push(timedata[i].dailydeceased)\r\n            tota.push(timedata[i].dailydeceased)\r\n        }\r\n        settotConfirmed(totc)\r\n        settotdate(totdat)\r\n        settotRecovered(totr)\r\n        settotDeaths(totd)\r\n        settotActive(tota)\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getData()\r\n        setfilerdata(data)\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        setfilerdata(data.filter((item) => (item.state.toLowerCase().includes(filter.toLowerCase()) || filter === '')).map(({state,statecode,confirmed,recovered,active,deaths,lastupdatedtime}) => ({state,confirmed,recovered,active,deaths,statecode,lastupdatedtime})))\r\n    },[filter])\r\n\r\n    const onsearch=(e)=>{\r\n        setsearch(true)\r\n        setfilter(e.target.value)\r\n    }\r\n\r\n    const load=()=>{\r\n        speak({text: ``})\r\n    }\r\n    \r\n    const confirmedpress=()=>{\r\n        setshowgraph('confirmed')\r\n        speak({text: `Total confirmed cases in india is of ${confirmed}`})\r\n    }\r\n    const activepress=()=>{\r\n        setshowgraph('Active')\r\n        speak({text: `Total active cases in india is of ${active}`})\r\n    }\r\n    const recoveredpress=()=>{\r\n        setshowgraph('recovered')\r\n        speak({text: `Total Recovered cases in india is of ${recovered}`})\r\n    }\r\n    const deathpress=()=>{\r\n        setshowgraph('Death')\r\n        speak({text: `Total deaths cases in india is of ${deaths}`})\r\n    }\r\n\r\n    return(\r\n        <div className='statstable'>\r\n            <div className='container-fluid mb-5'>\r\n            </div>\r\n            <div className='totaldetails'>\r\n                <div className='confirmed box' onClick={()=>confirmedpress()}>\r\n                    <h5>Confirmed</h5>\r\n                    <h3>{confirmed}</h3>\r\n                    { showgraph=='confirmed' ?\r\n                    <Line \r\n                        data={{ \r\n                            labels: totdate,\r\n                            datasets: [\r\n                                {\r\n                                label: 'Confirmed',\r\n                                data: totconfirmed,\r\n                                fill: false,\r\n                                backgroundColor: 'rgb(255, 99, 132)',\r\n                                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                                },\r\n                            ],\r\n                        }}\r\n                        height={300}\r\n                        width={500}\r\n                        options={{\r\n                            pointStyle: 'line',\r\n                            pointBorderWidth: .1,\r\n                            maintainAspectRatio:true,\r\n                        }}\r\n                    />\r\n                    :\r\n                    null\r\n                }\r\n                </div>\r\n                <div className='active box' onClick={()=>activepress()}>\r\n                    <h5> Active </h5>\r\n                    <h3>{active}</h3>\r\n                    { showgraph=='Active' ?\r\n                    <Line \r\n                        data={{ \r\n                            labels: totdate,\r\n                            datasets: [\r\n                                {\r\n                                label: 'Active',\r\n                                data: totactive,\r\n                                fill: false,\r\n                                backgroundColor: 'rgb(255, 99, 132)',\r\n                                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                                },\r\n                            ],\r\n                        }}\r\n                        height={300}\r\n                        width={500}\r\n                        options={{\r\n                            pointStyle: 'line',\r\n                            maintainAspectRatio:true\r\n                        }}\r\n                    />\r\n                    :\r\n                    null\r\n                }\r\n                </div>\r\n                <div className='recovered box' onClick={()=>recoveredpress()}>\r\n                    <h5>Recovered</h5>\r\n                    <h3>{recovered}</h3>\r\n                    { showgraph=='recovered' ?\r\n                    <Line \r\n                        data={{ \r\n                            labels: totdate,\r\n                            datasets: [\r\n                                {\r\n                                label: 'Recovered',\r\n                                data: totrecovered,\r\n                                fill: false,\r\n                                backgroundColor: 'rgb(255, 99, 132)',\r\n                                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                                },\r\n                            ],\r\n                        }}\r\n                        height={300}\r\n                        width={500}\r\n                        options={{\r\n                            pointStyle: 'line',\r\n                            maintainAspectRatio:true\r\n                        }}\r\n                    />\r\n                    :\r\n                    null\r\n                }\r\n                </div>\r\n                <div className='death box' onClick={()=>deathpress()}>\r\n                    <h5>Death</h5>\r\n                    <h3>{deaths}</h3>\r\n                    { showgraph=='Death' ?\r\n                    <Line \r\n                        data={{ \r\n                            labels: totdate,\r\n                            datasets: [\r\n                                {\r\n                                label: 'deaths',\r\n                                data: totdeaths,\r\n                                fill: false,\r\n                                backgroundColor: 'rgb(255, 99, 132)',\r\n                                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                                },\r\n                            ],\r\n                        }}\r\n                        height={300}\r\n                        width={500}\r\n                        options={{\r\n                            pointStyle: 'line',\r\n                            maintainAspectRatio:true\r\n                        }}\r\n                    />\r\n                    :\r\n                    null\r\n                }\r\n                </div>\r\n            </div>\r\n            <input className='search' type={'text'} placeholder={'Search'} value={filter} onChange={(e)=>onsearch(e)} />\r\n            <div className='table-responsive'>\r\n                <table className='table table-hover'>\r\n                    <thead className='thead-black'>\r\n                        <tr>\r\n                            <th >State</th>\r\n                            <th className='confirmed'>Confirmed</th>\r\n                            <th className='recovered'>Recovered</th>\r\n                            <th className='death'>Death</th>\r\n                            <th className='active'>Active</th>\r\n                            <th>Updated</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            search ? filterdata.map((item,index)=>{\r\n                                return(\r\n                                <tr key={index}>\r\n                                    <th style={{textAlign:'start'}}>{item.state} ({item.statecode})</th>\r\n                                    <td className='confirmed'>{item.confirmed}</td>\r\n                                    <td className='recovered'>{item.recovered}</td>\r\n                                    <td className='death'>{item.deaths}</td>\r\n                                    <td className='active'>{item.active}</td>\r\n                                    <td>{item.lastupdatedtime.split('/')[0]>=date.getDate()-1 ? (date.getHours()-item.lastupdatedtime.split('')[12])>=0 ? `${date.getHours()-item.lastupdatedtime.split('')[12]} hours ago` : `${date.getHours()+24-item.lastupdatedtime.split('')[12]} hours ago` : 'More Than day ago'}</td>\r\n                                </tr>\r\n                                )\r\n                            })\r\n                            :\r\n                            data.map((item,index)=>{\r\n                                return(\r\n                                <tr key={index}>\r\n                                    <th style={{textAlign:'start'}}>{item.state} ({item.statecode})</th>\r\n                                    <td className='confirmed'>{item.confirmed}</td>\r\n                                    <td className='recovered'>{item.recovered}</td>\r\n                                    <td className='death'>{item.deaths}</td>\r\n                                    <td className='active'>{item.active}</td>\r\n                                    <td>{item.lastupdatedtime.split('/')[0]>=date.getDate()-1 ? (date.getHours()-item.lastupdatedtime.split('')[12])>=0 ? `${date.getHours()-item.lastupdatedtime.split('')[12]} hours ago` : `${date.getHours()+24-item.lastupdatedtime.split('')[12]} hours ago` : 'More Than day ago'}</td>\r\n                                </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Stats","import React from 'react'\r\n\r\nconst Contact=()=>{\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Contact","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport News from './pages/News';\r\nimport Stats from './pages/Stats';\r\nimport Contacts from './pages/contact';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Switch> {/* The Switch decides which component to show based on the current URL.*/}\r\n\r\n      <Route exact path='/' component={Stats}></Route>\r\n      <Route path='/News' component={News}></Route>\r\n      <Route path='/Contact' component={Contacts}></Route>\r\n\r\n    </Switch>\r\n  \r\n  );\r\n}\r\n\r\nexport default Main;","import {useEffect} from 'react'\nimport Navbar from './components/Navbar'\nimport Main  from './Router';\nimport {HashRouter as Router} from 'react-router-dom'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Navbar />\n      <Main />\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}